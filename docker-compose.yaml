services:
  db:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5433:5432"
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth_service:
    image: ghcr.io/fotapol/fastboosty-auth_service:0.1.0
    env_file:
    - .envs/auth.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - network

  profile_service:
    image: ghcr.io/fotapol/fastboosty-profile_service:0.1.0
    env_file:
      - .envs/profile.env
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      auth_service:
        condition: service_started
    networks:
      - network

  content_service:
    image: ghcr.io/fotapol/fastboosty-content_service:0.1.0
    env_file:
      - .envs/content.env
    ports:
      - "8002:8002"
    depends_on:
      db:
        condition: service_healthy
      auth_service:
        condition: service_started
    networks:
      - network

  subscription_service:
    image: ghcr.io/fotapol/fastboosty-subscription_service:0.1.0
    env_file:
      - .envs/subscription.env
    ports:
      - "8003:8003"
    depends_on:
      db:
        condition: service_healthy
      auth_service:
        condition: service_started
      kafka:
        condition: service_healthy
      payment_service:
        condition: service_started
    networks:
      - network

  payment_service:
    image: ghcr.io/fotapol/fastboosty-payment_service:0.1.0
    env_file:
      - .envs/payment.env
    ports:
      - "8004:8004"
    depends_on:
      db:
        condition: service_healthy
      auth_service:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - network

  nginx:
    image: nginx:latest
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      auth_service:
        condition: service_started
      profile_service:
        condition: service_started
      content_service:
        condition: service_started
      subscription_service:
        condition: service_started
      payment_service:
        condition: service_started
    networks:
      - network


volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_log:

networks:
  network:
    driver: bridge
